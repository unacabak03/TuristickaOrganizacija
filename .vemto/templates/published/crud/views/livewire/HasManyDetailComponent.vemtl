<?php

<####>
<# TEMPLATE DATA #>
<# DATA:MODEL [ project = Project ] #>
<# DATA:MODEL [ hasManyDetail = HasManyDetail ] #>
<# DATA:RENDERABLE [ renderable = crud/views/livewire/LivewireHasManyDetailComponentRenderable(hasManyDetail) ] #>
<####>

<# Requires e main variables #>
<% const camelCase = this.require('camelCase') %>
<% const pascalCase = this.require('pascalCase') %>
<% const paramCase = this.require('paramCase') %>
<% const hasManyDetail = this.hasManyDetail %>
<# Parent CRUD Variables #>
<% const parentCrud = hasManyDetail.crud %>
<% const parentCrudModel = parentCrud.model %>
<% const parentModelName = parentCrudModel.name %>
<% const parentCrudItemVarName = camelCase(parentCrud.settings.itemName) %>
<% const viewsFolderName = `${parentCrud.section.getFolderName()}.${paramCase(parentCrud.plural)}` %>
<# Detail CRUD Variables #>
<% const detailCrud = hasManyDetail.detailCrud %>
<% const detailCrudModel = detailCrud.model %>
<% const modelName = detailCrudModel.name %>
<% const itemVarName = camelCase(detailCrud.settings.itemName) %>
<% const collectionVarName = 'detail' + pascalCase(detailCrud.settings.collectionName) %>

namespace <$ detailCrud.livewireNamespace $>;

use Livewire\Form;
use Livewire\Component;
use Livewire\WithPagination;
use Livewire\WithFileUploads;
use Illuminate\Support\Collection;
use Illuminate\Support\Facades\Storage;
use App\Models\<$ modelName $>;
use App\Models\<$ parentModelName $>;
<% for (let input of detailCrud.getBelongsToInputs()) { %>
use App\Models\<$ input.getRelatedModelName() $>;
<% } %>
use <$ detailCrud.livewireFormsNamespace $>\CreateDetailForm;
use <$ detailCrud.livewireFormsNamespace $>\UpdateDetailForm;
// hook:IMPORTS

class <$ this.filenameWithoutExtension $> extends Component
{
    use WithFileUploads, WithPagination;
    // hook:TRAITS

    public CreateDetailForm|UpdateDetailForm $form;

    // hook:BEFORE_VARIABLES
    public ?<$ modelName $> $<$ itemVarName $>;
    public <$ parentModelName $> $<$ parentCrudItemVarName $>;

    <% for (let input of detailCrud.getBelongsToInputs()) { %>
    <% const model = input.getRelatedModel() %>
    public Collection $<$ camelCase(model.plural) $>;
    <% } %>
    // hook:AFTER_VARIABLES

    public $showingModal = false;
    
    public $<$ collectionVarName $>Search = '';
    public $<$ collectionVarName $>SortField = 'updated_at';
    public $<$ collectionVarName $>SortDirection = 'desc';

    public $queryString = ['<$ collectionVarName $>Search', '<$ collectionVarName $>SortField', '<$ collectionVarName $>SortDirection'];

    public $confirming<$ pascalCase(itemVarName) $>Deletion = false;
    public string $deleting<$ pascalCase(itemVarName) $>;
    // hook:AFTER_VARIABLES

    public function mount()
    {
        $this->form = new CreateDetailForm($this, 'form');

        // hook:BEFORE_MOUNT
        <% for (let input of detailCrud.getBelongsToInputs()) { %>
        <# --- #>
        <% const model = input.getRelatedModel() %>
        <% const label = model.table.getLabelColumnName() %>
        <% const primaryKey = model.table.getPrimaryKeyName() %>
        <# --- #>
        $this-><$ camelCase(model.plural) $> = <$ model.name $>::pluck('<$ label $>', '<$ primaryKey $>');
        <% } %>
        // hook:AFTER_MOUNT
    }

    public function new<$ pascalCase(itemVarName) $>()
    {
        $this->form = new CreateDetailForm($this, 'form');
        $this-><$ itemVarName $> = null;

        $this->showModal();
    }

    public function edit<$ pascalCase(itemVarName) $>(<$ modelName $> $<$ itemVarName $>)
    {
        $this->form = new UpdateDetailForm($this, 'form');
        $this->form->set<$ modelName $>($<$ itemVarName $>);
        $this-><$ itemVarName $> = $<$ itemVarName $>;

        $this->showModal();
    }

    public function showModal()
    {
        $this->showingModal = true;
    }

    public function closeModal()
    {
        $this->showingModal = false;
    }

    public function confirm<$ pascalCase(itemVarName) $>Deletion(string $id)
    {
        $this->deleting<$ pascalCase(itemVarName) $> = $id;

        $this->confirming<$ pascalCase(itemVarName) $>Deletion = true;
    }

    public function delete<$ pascalCase(itemVarName) $>(<$ modelName $> $<$ itemVarName $>)
    {
        $this->authorize('delete', $<$ itemVarName $>);

        $<$ itemVarName $>->delete();

        $this->confirming<$ pascalCase(itemVarName) $>Deletion = false;
    }

    public function save()
    {
        if(empty($this-><$ itemVarName $>)) {
            $this->authorize('create', <$ modelName $>::class);
        } else {
            $this->authorize('update', $this-><$ itemVarName $>);
        }

        $this->form-><$ hasManyDetail.relationship.foreignKey.name $> = $this-><$ parentCrudItemVarName $>-><$ parentCrudModel.table.getPrimaryKeyName() $>;
        $this->form->save();

        $this->closeModal();
    }

    public function sortBy($field)
    {
        if ($this-><$ collectionVarName $>SortField === $field) {
            $this-><$ collectionVarName $>SortDirection =
                $this-><$ collectionVarName $>SortDirection === 'asc' ? 'desc' : 'asc';
        } else {
            $this-><$ collectionVarName $>SortDirection = 'asc';
        }

        $this-><$ collectionVarName $>SortField = $field;
    }

    public function getRowsProperty()
    {
        return $this->rowsQuery->paginate(5);
    }

    public function getRowsQueryProperty()
    {
        <% if(detailCrud.hasDefaultSearchColumn()) { %>
        return $this-><$ parentCrudItemVarName $>-><$ hasManyDetail.relationship.name $>()
            ->orderBy($this-><$ collectionVarName $>SortField, $this-><$ collectionVarName $>SortDirection)
            ->where('<$ detailCrud.defaultSearchColumn.name $>', 'like', "%{$this-><$ collectionVarName $>Search}%");
        <% } else { %>
        return $this-><$ parentCrudItemVarName $>-><$ hasManyDetail.relationship.name $>();
        <% } %>
    }

    public function render()
    {
        return view('livewire.<$ viewsFolderName $>.<$ paramCase(this.hasManyDetail.detailCrud.plural) $>-detail', [
            '<$ collectionVarName $>' => $this->rows,
        ]);
    }
}
